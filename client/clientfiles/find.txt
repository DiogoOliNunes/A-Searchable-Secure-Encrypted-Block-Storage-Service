
FIND(1)                   BSD General Commands Manual                  FIND(1)

NNAAMMEE
     ffiinndd -- walk a file hierarchy

SSYYNNOOPPSSIISS
     ffiinndd [--HH | --LL | --PP] [--EEXXddssxx] [--ff _p_a_t_h] _p_a_t_h _._._. [_e_x_p_r_e_s_s_i_o_n]
     ffiinndd [--HH | --LL | --PP] [--EEXXddssxx] --ff _p_a_t_h [_p_a_t_h _._._.] [_e_x_p_r_e_s_s_i_o_n]

DDEESSCCRRIIPPTTIIOONN
     The ffiinndd utility recursively descends the directory tree for each _p_a_t_h
     listed, evaluating an _e_x_p_r_e_s_s_i_o_n (composed of the ``primaries'' and
     ``operands'' listed below) in terms of each file in the tree.

     The options are as follows:

     --EE      Interpret regular expressions followed by --rreeggeexx and --iirreeggeexx pri-
             maries as extended (modern) regular expressions rather than basic
             regular expressions (BRE's).  The re_format(7) manual page fully
             describes both formats.

     --HH      Cause the file information and file type (see stat(2)) returned
             for each symbolic link specified on the command line to be those
             of the file referenced by the link, not the link itself.  If the
             referenced file does not exist, the file information and type
             will be for the link itself.  File information of all symbolic
             links not on the command line is that of the link itself.

     --LL      Cause the file information and file type (see stat(2)) returned
             for each symbolic link to be those of the file referenced by the
             link, not the link itself.  If the referenced file does not
             exist, the file information and type will be for the link itself.

             This option is equivalent to the deprecated --ffoollllooww primary.

     --PP      Cause the file information and file type (see stat(2)) returned
             for each symbolic link to be those of the link itself.  This is
             the default.

     --XX      Permit ffiinndd to be safely used in conjunction with xargs(1).  If a
             file name contains any of the delimiting characters used by
             xargs(1), a diagnostic message is displayed on standard error,
             and the file is skipped.  The delimiting characters include sin-
             gle (`` ' '') and double (`` " '') quotes, backslash (``\''),
             space, tab and newline characters.

             However, you may wish to consider the --pprriinntt00 primary in conjunc-
             tion with ``xxaarrggss --00'' as an effective alternative.

     --dd      Cause ffiinndd to perform a depth-first traversal, i.e., directories
             are visited in post-order and all entries in a directory will be
             acted on before the directory itself.  By default, ffiinndd visits
             directories in pre-order, i.e., before their contents.  Note, the
             default is _n_o_t a breadth-first traversal.

             This option is equivalent to the --ddeepptthh primary of IEEE Std
             1003.1-2001 (``POSIX.1'').  The --dd option can be useful when ffiinndd
             is used with cpio(1) to process files that are contained in
             directories with unusual permissions.  It ensures that you have
             write permission while you are placing files in a directory, then
             sets the directory's permissions as the last thing.

     --ff      Specify a file hierarchy for ffiinndd to traverse.  File hierarchies
             may also be specified as the operands immediately following the
             options.

     --ss      Cause ffiinndd to traverse the file hierarchies in lexicographical
             order, i.e., alphabetical order within each directory.  Note:
             `find -s' and `find | sort' may give different results.

     --xx      Prevent ffiinndd from descending into directories that have a device
             number different than that of the file from which the descent
             began.

             This option is equivalent to the deprecated --xxddeevv primary.

PPRRIIMMAARRIIEESS
     All primaries which take a numeric argument allow the number to be pre-
     ceded by a plus sign (``+'') or a minus sign (``-'').  A preceding plus
     sign means ``more than n'', a preceding minus sign means ``less than n''
     and neither means ``exactly n''.

     --BBmmiinn _n
             True if the difference between the time of a file's inode cre-
             ation and the time ffiinndd was started, rounded up to the next full
             minute, is _n minutes.

     --BBnneewweerr _f_i_l_e
             Same as --nneewweerrBBmm.

     --BBttiimmee _n[ssmmhhddww]
             If no units are specified, this primary evaluates to true if the
             difference between the time of a file's inode creation and the
             time ffiinndd was started, rounded up to the next full 24-hour
             period, is _n 24-hour periods.

             If units are specified, this primary evaluates to true if the
             difference between the time of a file's inode creation and the
             time ffiinndd was started is exactly _n units.  Please refer to the
             --aattiimmee primary description for information on supported time
             units.

     --aaccll    May be used in conjunction with other primaries to locate files
             with extended ACLs.  See acl(3) for more information.

     --aammiinn _n
             True if the difference between the file last access time and the
             time ffiinndd was started, rounded up to the next full minute, is _n
             minutes.

     --aanneewweerr _f_i_l_e
             Same as --nneewweerraamm.

     --aattiimmee _n[ssmmhhddww]
             If no units are specified, this primary evaluates to true if the
             difference between the file last access time and the time ffiinndd
             was started, rounded up to the next full 24-hour period, is _n
             24-hour periods.

             If units are specified, this primary evaluates to true if the
             difference between the file last access time and the time ffiinndd
             was started is exactly _n units.  Possible time units are as fol-
             lows:

             ss       second
             mm       minute (60 seconds)
             hh       hour (60 minutes)
             dd       day (24 hours)
             ww       week (7 days)

             Any number of units may be combined in one --aattiimmee argument, for
             example, ``-atime -1h30m''.  Units are probably only useful when
             used in conjunction with the ++ or -- modifier.

     --ccmmiinn _n
             True if the difference between the time of last change of file
             status information and the time ffiinndd was started, rounded up to
             the next full minute, is _n minutes.

     --ccnneewweerr _f_i_l_e
             Same as --nneewweerrccmm.

     --ccttiimmee _n[ssmmhhddww]
             If no units are specified, this primary evaluates to true if the
             difference between the time of last change of file status infor-
             mation and the time ffiinndd was started, rounded up to the next full
             24-hour period, is _n 24-hour periods.

             If units are specified, this primary evaluates to true if the
             difference between the time of last change of file status infor-
             mation and the time ffiinndd was started is exactly _n units.  Please
             refer to the --aattiimmee primary description for information on sup-
             ported time units.

     --dd      Same as ddeepptthh.  GNU find implements this as a primary in mistaken
             emulation of FreeBSD find(1).

     --ddeelleettee
             Delete found files and/or directories.  Always returns true.
             This executes from the current working directory as ffiinndd recurses
             down the tree.  It will not attempt to delete a filename with a
             ``_/'' character in its pathname relative to ``_.'' for security
             reasons.  Depth-first traversal processing is implied by this
             option.  Following symlinks is incompatible with this option.

     --ddeepptthh  Always true; same as the --dd option.

     --ddeepptthh _n
             True if the depth of the file relative to the starting point of
             the traversal is _n.

     --eemmppttyy  True if the current file or directory is empty.

     --eexxeecc _u_t_i_l_i_t_y [_a_r_g_u_m_e_n_t _._._.] ;
             True if the program named _u_t_i_l_i_t_y returns a zero value as its
             exit status.  Optional _a_r_g_u_m_e_n_t_s may be passed to the utility.
             The expression must be terminated by a semicolon (``;'').  If you
             invoke ffiinndd from a shell you may need to quote the semicolon if
             the shell would otherwise treat it as a control operator.  If the
             string ``{}'' appears anywhere in the utility name or the argu-
             ments it is replaced by the pathname of the current file.
             _U_t_i_l_i_t_y will be executed from the directory from which ffiinndd was
             executed.  _U_t_i_l_i_t_y and _a_r_g_u_m_e_n_t_s are not subject to the further
             expansion of shell patterns and constructs.

     --eexxeecc _u_t_i_l_i_t_y [_a_r_g_u_m_e_n_t _._._.] {} +
             Same as --eexxeecc, except that ``{}'' is replaced with as many path-
             names as possible for each invocation of _u_t_i_l_i_t_y.  This behaviour
             is similar to that of xargs(1).

     --eexxeeccddiirr _u_t_i_l_i_t_y [_a_r_g_u_m_e_n_t _._._.] ;
             The --eexxeeccddiirr primary is identical to the --eexxeecc primary with the
             exception that _u_t_i_l_i_t_y will be executed from the directory that
             holds the current file.  The filename substituted for the string
             ``{}'' is not qualified.

     --eexxeeccddiirr _u_t_i_l_i_t_y [_a_r_g_u_m_e_n_t _._._.] {} +
             Same as --eexxeeccddiirr, except that ``{}'' is replaced with as many
             pathnames as possible for each invocation of _u_t_i_l_i_t_y.  This be-
             haviour is similar to that of xargs(1).

     --ffllaaggss [--|++]_f_l_a_g_s,_n_o_t_f_l_a_g_s
             The flags are specified using symbolic names (see chflags(1)).
             Those with the "no" prefix (except "nodump") are said to be
             _n_o_t_f_l_a_g_s.  Flags in _f_l_a_g_s are checked to be set, and flags in
             _n_o_t_f_l_a_g_s are checked to be not set.  Note that this is different
             from --ppeerrmm, which only allows the user to specify mode bits that
             are set.

             If flags are preceded by a dash (``-''), this primary evaluates
             to true if at least all of the bits in _f_l_a_g_s and none of the bits
             in _n_o_t_f_l_a_g_s are set in the file's flags bits.  If flags are pre-
             ceded by a plus (``+''), this primary evaluates to true if any of
             the bits in _f_l_a_g_s is set in the file's flags bits, or any of the
             bits in _n_o_t_f_l_a_g_s is not set in the file's flags bits.  Otherwise,
             this primary evaluates to true if the bits in _f_l_a_g_s exactly match
             the file's flags bits, and none of the _f_l_a_g_s bits match those of
             _n_o_t_f_l_a_g_s.

     --ffssttyyppee _t_y_p_e
             True if the file is contained in a file system of type _t_y_p_e.  The
             lsvfs(1) command can be used to find out the types of file sys-
             tems that are available on the system.  In addition, there are
             two pseudo-types, ``local'' and ``rdonly''.  The former matches
             any file system physically mounted on the system where the ffiinndd
             is being executed and the latter matches any file system which is
             mounted read-only.

     --ggiidd _g_n_a_m_e
             The same thing as _-_g_r_o_u_p _g_n_a_m_e for compatibility with GNU find.
             GNU find imposes a restriction that _g_n_a_m_e is numeric, while
             find(1) does not.

     --ggrroouupp _g_n_a_m_e
             True if the file belongs to the group _g_n_a_m_e.  If _g_n_a_m_e is numeric
             and there is no such group name, then _g_n_a_m_e is treated as a group
             ID.

     --iiggnnoorree__rreeaaddddiirr__rraaccee
             This option is for GNU find compatibility and is ignored.

     --iillnnaammee _p_a_t_t_e_r_n
             Like --llnnaammee, but the match is case insensitive.  This is a GNU
             find extension.

     --iinnaammee _p_a_t_t_e_r_n
             Like --nnaammee, but the match is case insensitive.

     --iinnuumm _n
             True if the file has inode number _n.

     --iippaatthh _p_a_t_t_e_r_n
             Like --ppaatthh, but the match is case insensitive.

     --iirreeggeexx _p_a_t_t_e_r_n
             Like --rreeggeexx, but the match is case insensitive.

     --iiwwhhoolleennaammee _p_a_t_t_e_r_n
             The same thing as --iippaatthh, for GNU find compatibility.

     --lliinnkkss _n
             True if the file has _n links.

     --llnnaammee _p_a_t_t_e_r_n
             Like --nnaammee, but the contents of the symbolic link are matched
             instead of the file name.  Note that this only matches broken
             symbolic links if symbolic links are being followed.  This is a
             GNU find extension.

     --llss     This primary always evaluates to true.  The following information
             for the current file is written to standard output: its inode
             number, size in 512-byte blocks, file permissions, number of hard
             links, owner, group, size in bytes, last modification time, and
             pathname.  If the file is a block or character special file, the
             device number will be displayed instead of the size in bytes.  If
             the file is a symbolic link, the pathname of the linked-to file
             will be displayed preceded by ``->''.  The format is identical to
             that produced by ``llss --ddggiillss''.

     --mmaaxxddeepptthh _n
             Always true; descend at most _n directory levels below the command
             line arguments.  If any --mmaaxxddeepptthh primary is specified, it
             applies to the entire expression even if it would not normally be
             evaluated.  ``--mmaaxxddeepptthh 0'' limits the whole search to the com-
             mand line arguments.

     --mmiinnddeepptthh _n
             Always true; do not apply any tests or actions at levels less
             than _n.  If any --mmiinnddeepptthh primary is specified, it applies to the
             entire expression even if it would not normally be evaluated.
             ``--mmiinnddeepptthh 1'' processes all but the command line arguments.

     --mmmmiinn _n
             True if the difference between the file last modification time
             and the time ffiinndd was started, rounded up to the next full
             minute, is _n minutes.

     --mmnneewweerr _f_i_l_e
             Same as --nneewweerr.

     --mmoouunntt  The same thing as --xxddeevv, for GNU find compatibility.

     --mmttiimmee _n[ssmmhhddww]
             If no units are specified, this primary evaluates to true if the
             difference between the file last modification time and the time
             ffiinndd was started, rounded up to the next full 24-hour period, is
             _n 24-hour periods.

             If units are specified, this primary evaluates to true if the
             difference between the file last modification time and the time
             ffiinndd was started is exactly _n units.  Please refer to the --aattiimmee
             primary description for information on supported time units.

     --nnaammee _p_a_t_t_e_r_n
             True if the last component of the pathname being examined matches
             _p_a_t_t_e_r_n.  Special shell pattern matching characters (``['',
             ``]'', ``*'', and ``?'') may be used as part of _p_a_t_t_e_r_n.  These
             characters may be matched explicitly by escaping them with a
             backslash (``\'').

     --nneewweerr _f_i_l_e
             True if the current file has a more recent last modification time
             than _f_i_l_e.

     --nneewweerr_X_Y _f_i_l_e
             True if the current file has a more recent last access time
             (_X=aa), inode creation time (_X=BB), change time (_X=cc), or modifica-
             tion time (_X=mm) than the last access time (_Y=aa), inode creation
             time (_Y=BB), change time (_Y=cc), or modification time (_Y=mm) of
             _f_i_l_e.  In addition, if _Y=tt, then _f_i_l_e is instead interpreted as a
             direct date specification of the form understood by cvs(1).  Note
             that --nneewweerrmmmm is equivalent to --nneewweerr.

     --nnooggrroouupp
             True if the file belongs to an unknown group.

     --nnooiiggnnoorree__rreeaaddddiirr__rraaccee
             This option is for GNU find compatibility and is ignored.

     --nnoolleeaaff
             This option is for GNU find compatibility.  In GNU find it dis-
             ables an optimization not relevant to find(1), so it is ignored.

     --nnoouusseerr
             True if the file belongs to an unknown user.

     --ookk _u_t_i_l_i_t_y [_a_r_g_u_m_e_n_t _._._.] ;
             The --ookk primary is identical to the --eexxeecc primary with the excep-
             tion that ffiinndd requests user affirmation for the execution of the
             _u_t_i_l_i_t_y by printing a message to the terminal and reading a
             response.  If the response is not affirmative (`y' in the
             ``POSIX'' locale), the command is not executed and the value of
             the --ookk expression is false.

     --ookkddiirr _u_t_i_l_i_t_y [_a_r_g_u_m_e_n_t _._._.] ;
             The --ookkddiirr primary is identical to the --eexxeeccddiirr primary with the
             same exception as described for the --ookk primary.

     --ppaatthh _p_a_t_t_e_r_n
             True if the pathname being examined matches _p_a_t_t_e_r_n.  Special
             shell pattern matching characters (``['', ``]'', ``*'', and
             ``?'') may be used as part of _p_a_t_t_e_r_n.  These characters may be
             matched explicitly by escaping them with a backslash (``\'').
             Slashes (``/'') are treated as normal characters and do not have
             to be matched explicitly.

     --ppeerrmm [--|++]_m_o_d_e
             The _m_o_d_e may be either symbolic (see chmod(1)) or an octal num-
             ber.  If the _m_o_d_e is symbolic, a starting value of zero is
             assumed and the _m_o_d_e sets or clears permissions without regard to
             the process' file mode creation mask.  If the _m_o_d_e is octal, only
             bits 07777 (S_ISUID | S_ISGID | S_ISTXT | S_IRWXU | S_IRWXG |
             S_IRWXO) of the file's mode bits participate in the comparison.
             If the _m_o_d_e is preceded by a dash (``-''), this primary evaluates
             to true if at least all of the bits in the _m_o_d_e are set in the
             file's mode bits.  If the _m_o_d_e is preceded by a plus (``+''),
             this primary evaluates to true if any of the bits in the _m_o_d_e are
             set in the file's mode bits.  Otherwise, this primary evaluates
             to true if the bits in the _m_o_d_e exactly match the file's mode
             bits.  Note, the first character of a symbolic mode may not be a
             dash (``-'').

     --pprriinntt  This primary always evaluates to true.  It prints the pathname of
             the current file to standard output.  If none of --eexxeecc, --llss,
             --pprriinntt, --pprriinntt00, or --ookk is specified, the given expression shall
             be effectively replaced by (( _g_i_v_e_n _e_x_p_r_e_s_s_i_o_n )) --pprriinntt.

     --pprriinntt00
             This primary always evaluates to true.  It prints the pathname of
             the current file to standard output, followed by an ASCII NUL
             character (character code 0).

     --pprruunnee  This primary always evaluates to true.  It causes ffiinndd to not
             descend into the current file.  Note, the --pprruunnee primary has no
             effect if the --dd option was specified.

     --rreeggeexx _p_a_t_t_e_r_n
             True if the whole path of the file matches _p_a_t_t_e_r_n using regular
             expression.  To match a file named ``_._/_f_o_o_/_x_y_z_z_y'', you can use
             the regular expression ``.*/[xyz]*'' or ``.*/foo/.*'', but not
             ``xyzzy'' or ``/foo/''.

     --ssaammeeffiillee _n_a_m_e
             True if the file is a hard link to _n_a_m_e.  If the command option
             --LL is specified, it is also true if the file is a symbolic link
             and points to _n_a_m_e.

     --ssiizzee _n[cckkMMGGTTPP]
             True if the file's size, rounded up, in 512-byte blocks is _n.  If
             _n is followed by a cc, then the primary is true if the file's size
             is _n bytes (characters).  Similarly if _n is followed by a scale
             indicator then the file's size is compared to _n scaled as:

             kk       kilobytes (1024 bytes)
             MM       megabytes (1024 kilobytes)
             GG       gigabytes (1024 megabytes)
             TT       terabytes (1024 gigabytes)
             PP       petabytes (1024 terabytes)

     --ttyyppee _t
             True if the file is of the specified type.  Possible file types
             are as follows:

             bb       block special
             cc       character special
             dd       directory
             ff       regular file
             ll       symbolic link
             pp       FIFO
             ss       socket

     --uuiidd _u_n_a_m_e
             The same thing as _-_u_s_e_r _u_n_a_m_e for compatibility with GNU find.
             GNU find imposes a restriction that _u_n_a_m_e is numeric, while
             find(1) does not.

     --uusseerr _u_n_a_m_e
             True if the file belongs to the user _u_n_a_m_e.  If _u_n_a_m_e is numeric
             and there is no such user name, then _u_n_a_m_e is treated as a user
             ID.

     --wwhhoolleennaammee _p_a_t_t_e_r_n
             The same thing as --ppaatthh, for GNU find compatibility.

     --xxaattttrr  True if the file has any extended attributes.

     --xxaattttrrnnaammee _n_a_m_e
             True if the file has an extended attribute with the specified
             _n_a_m_e.

OOPPEERRAATTOORRSS
     The primaries may be combined using the following operators.  The opera-
     tors are listed in order of decreasing precedence.

     (( _e_x_p_r_e_s_s_i_o_n ))
             This evaluates to true if the parenthesized expression evaluates
             to true.

     !! _e_x_p_r_e_s_s_i_o_n
     --nnoott _e_x_p_r_e_s_s_i_o_n
             This is the unary NOT operator.  It evaluates to true if the
             expression is false.

     --ffaallssee  Always false.
     --ttrruuee   Always true.

     _e_x_p_r_e_s_s_i_o_n --aanndd _e_x_p_r_e_s_s_i_o_n
     _e_x_p_r_e_s_s_i_o_n _e_x_p_r_e_s_s_i_o_n
             The --aanndd operator is the logical AND operator.  As it is implied
             by the juxtaposition of two expressions it does not have to be
             specified.  The expression evaluates to true if both expressions
             are true.  The second expression is not evaluated if the first
             expression is false.

     _e_x_p_r_e_s_s_i_o_n --oorr _e_x_p_r_e_s_s_i_o_n
             The --oorr operator is the logical OR operator.  The expression
             evaluates to true if either the first or the second expression is
             true.  The second expression is not evaluated if the first
             expression is true.

     All operands and primaries must be separate arguments to ffiinndd.  Primaries
     which themselves take arguments expect each argument to be a separate
     argument to ffiinndd.

EENNVVIIRROONNMMEENNTT
     The LANG, LC_ALL, LC_COLLATE, LC_CTYPE, LC_MESSAGES and LC_TIME environ-
     ment variables affect the execution of the ffiinndd utility as described in
     environ(7).

EEXXAAMMPPLLEESS
     The following examples are shown as given to the shell:

     find / \! -name "*.c" -print
             Print out a list of all the files whose names do not end in _._c.

     find / -newer ttt -user wnj -print
             Print out a list of all the files owned by user ``wnj'' that are
             newer than the file _t_t_t.

     find / \! \( -newer ttt -user wnj \) -print
             Print out a list of all the files which are not both newer than
             _t_t_t and owned by ``wnj''.

     find / \( -newer ttt -or -user wnj \) -print
             Print out a list of all the files that are either owned by
             ``wnj'' or that are newer than _t_t_t.

     find / -newerct '1 minute ago' -print
             Print out a list of all the files whose inode change time is more
             recent than the current time minus one minute.

     find / -type f -exec echo {} \;
             Use the echo(1) command to print out a list of all the files.

     find -L /usr/ports/packages -type l -exec rm -- {} +
             Delete all broken symbolic links in _/_u_s_r_/_p_o_r_t_s_/_p_a_c_k_a_g_e_s.

     find /usr/src -name CVS -prune -o -depth +6 -print
             Find files and directories that are at least seven levels deep in
             the working directory _/_u_s_r_/_s_r_c.

     find /usr/src -name CVS -prune -o -mindepth 7 -print
             Is not equivalent to the previous example, since --pprruunnee is not
             evaluated below level seven.

CCOOMMPPAATTIIBBIILLIITTYY
     The --ffoollllooww primary is deprecated; the --LL option should be used instead.
     See the _S_T_A_N_D_A_R_D_S section below for details.

SSEEEE AALLSSOO
     chflags(1), chmod(1), cvs(1), locate(1), lsvfs(1), whereis(1), which(1),
     xargs(1), stat(2), acl(3), fts(3), getgrent(3), getpwent(3), strmode(3),
     re_format(7), symlink(7)

SSTTAANNDDAARRDDSS
     The ffiinndd utility syntax is a superset of the syntax specified by the IEEE
     Std 1003.1-2001 (``POSIX.1'') standard.

     All the single character options except --HH and --LL as well as --aammiinn,
     --aanneewweerr, --ccmmiinn, --ccnneewweerr, --ddeelleettee, --eemmppttyy, --ffssttyyppee, --iinnaammee, --iinnuumm,
     --iirreeggeexx, --llss, --mmaaxxddeepptthh, --mmiinnddeepptthh, --mmmmiinn, --ppaatthh, --pprriinntt00, --rreeggeexx and all
     of the --BB** birthtime related primaries are extensions to IEEE Std
     1003.1-2001 (``POSIX.1'').

     Historically, the --dd, --LL and --xx options were implemented using the pri-
     maries --ddeepptthh, --ffoollllooww, and --xxddeevv.  These primaries always evaluated to
     true.  As they were really global variables that took effect before the
     traversal began, some legal expressions could have unexpected results.
     An example is the expression --pprriinntt --oo --ddeepptthh.  As --pprriinntt always evalu-
     ates to true, the standard order of evaluation implies that --ddeepptthh would
     never be evaluated.  This is not the case.

     The operator --oorr was implemented as --oo, and the operator --aanndd was imple-
     mented as --aa.

     Historic implementations of the --eexxeecc and --ookk primaries did not replace
     the string ``{}'' in the utility name or the utility arguments if it had
     preceding or following non-whitespace characters.  This version replaces
     it no matter where in the utility name or arguments it appears.

     The --EE option was inspired by the equivalent grep(1) and sed(1) options.

HHIISSTTOORRYY
     A ffiinndd command appeared in Version 1 AT&T UNIX.

BBUUGGSS
     The special characters used by ffiinndd are also special characters to many
     shell programs.  In particular, the characters ``*'', ``['', ``]'',
     ``?'', ``('', ``)'', ``!'', ``\'' and ``;'' may have to be escaped from
     the shell.

     As there is no delimiter separating options and file names or file names
     and the _e_x_p_r_e_s_s_i_o_n, it is difficult to specify files named _-_x_d_e_v or _!.
     These problems are handled by the --ff option and the getopt(3) ``----'' con-
     struct.

     The --ddeelleettee primary does not interact well with other options that cause
     the file system tree traversal options to be changed.

     The --mmiinnddeepptthh and --mmaaxxddeepptthh primaries are actually global options (as
     documented above).  They should probably be replaced by options which
     look like options.

BSD                           September 28, 2011                           BSD
